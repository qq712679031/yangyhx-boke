import{_ as a,p as e,q as i,a1 as l}from"./framework-5866ffd3.js";const s={},n=l(`<h3 id="_1、impala介绍" tabindex="-1"><a class="header-anchor" href="#_1、impala介绍" aria-hidden="true">#</a> 1、impala介绍</h3><h4 id="_1-1-impala基本介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-impala基本介绍" aria-hidden="true">#</a> 1.1 impala基本介绍</h4><ul><li><p>​ impala是cloudera提供的一款高效率的sql查询工具，提供实时的查询效果，官方测试性能比hive快10到100倍，其sql查询比sparkSQL还要更加快速， 号称是当前大数据领域最快的查询sql工具。</p></li><li><p>​ impala是参照谷歌的新三篇论文（Caffeine--网络搜索引擎、Pregel--分布式图计算、Dremel--交互式分析工具）当中的 实现而来，其中旧三篇论文分别是（BigTable，GFS，MapReduce)。</p></li><li><p>​ impala是基于hive并使用内存进行计算，兼顾数据仓库，具有实时，批处理，多并发等优点 。</p></li><li><p>​ Kudu与Apache Impala （孵化）紧密集成，impala天然就支持兼容kudu，允许开发人员使用Impala的SQL语法从Kudu的tablets 插入，查询，更新和删除数据；</p></li></ul><h4 id="_1-2-impala与hive的关系" tabindex="-1"><a class="header-anchor" href="#_1-2-impala与hive的关系" aria-hidden="true">#</a> 1.2 impala与hive的关系</h4><ul><li><p>impala是基于hive的大数据分析查询引擎，直接使用hive的元数据metadata。</p></li><li><p>impala元数据都存储在hive的metastore当中，并且impala兼容hive的绝大多数sql语法。</p></li><li><p>安装impala的话，必须先安装hive，保证hive安装成功，并且还需要启动hive的metastore服务。</p></li></ul><h4 id="_1-3-impala的优缺点" tabindex="-1"><a class="header-anchor" href="#_1-3-impala的优缺点" aria-hidden="true">#</a> 1.3 impala的优缺点</h4><ul><li><p>优点</p><ul><li><p>1、 impala比较快，非常快，特别快，因为所有的计算都可以放入内存当中进行完成，只要你内存足够大</p></li><li><p>2、 摈弃了MR的计算，改用C++来实现，有针对性的硬件优化</p></li><li><p>3、 具有数据仓库的特性，对hive的原有数据做数据分析</p></li><li><p>4、多种存储格式可以选择（Parquet, Text, Avro, RCFile, SequenceFile）。</p></li><li><p>5、支持ODBC，jdbc远程访问</p></li></ul></li><li><p>缺点</p><ul><li><p>1、基于内存计算，对内存依赖性较大</p></li><li><p>2、改用C++编写，意味着维护难度增大</p></li><li><p>3、基于hive，与hive共存亡，紧耦合</p></li><li><p>4、稳定性不如hive，存在数据丢失的情况</p></li><li><p>5、不支持用户定义函数UDF</p></li></ul></li></ul><h4 id="_1-4-impala架构和查询过程" tabindex="-1"><a class="header-anchor" href="#_1-4-impala架构和查询过程" aria-hidden="true">#</a> 1.4 impala架构和查询过程</h4><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/20171105084851619.png" alt="20171105084851619"></p><ul><li><p><strong>impala架构说明</strong></p><ul><li><p>Impala Statestore</p><ul><li>检查集群各个节点上Impala daemon的健康状态</li><li>同时不间断地将结果反馈给各个Impala daemon</li><li>这个服务的物理进程名称是statestored，在整个集群中我们仅需要一个这样的进程即可</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>补充说明：

    如果某个Impala节点由于硬件错误、软件错误或者其他原因导致离线，statestore就会通知其他的节点，避免其他节点再向这个离线的节点发送请求。
    
    由于statestore是当集群节点有问题的时候起通知作用，所以它对Impala集群并不是有关键影响的。
    
    如果statestore没有运行或者运行失败，其他节点和分布式任务会照常运行，只是说当节点掉线的时候集群会变得没那么健壮。当statestore恢复正常运行时，它就又开始与其他节点通信并进行监控。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Impala Catalog</p><ul><li>将SQL语句做出的元数据变化通知给集群的各个节点.</li><li>catalog服务的物理进程名称是catalogd，在整个集群中仅需要一个这样的进程。</li><li>由于它的请求会跟statestore daemon交互，所以最好让statestored和catalogd这两个进程在同一节点上.</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>补充说明：
    Impala 1.2中加入的catalog服务减少了REFRESH和INVALIDATE METADATA语句的使用。
在之前的版本中，当在某个节点上执行了CREATE DATABASE、DROP DATABASE、CREATE TABLE、ALTER TABLE、或者DROP TABLE语句之后，需要在其它的各个节点上执行命令INVALIDATE METADATA来确保元数据信息的更新。

    同样的，当你在某个节点上执行了INSERT语句，在其它节点上执行查询时就得先执行REFRESH table_name这个操作，这样才能识别到新增的数据文件。

    需要注意的是，通过Impala执行的操作带来的元数据变化，有了catalog就不需要再执行REFRESH和INVALIDATE METADATA，但如果是通过Hive进行的建表、加载数据，则仍然需要执行REFRESH和INVALIDATE METADATA来通知Impala更新元数据信息。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Impala Daemon</p><ul><li>Impala的核心组件是运行在各个节点上面的impalad这个守护进程（Impala daemon)</li><li>它负责读写数据文件，接收从impala-shell、Hue、JDBC、ODBC等接口发送的查询语句，并行化查询语句和分发工作任务到Impala集群的各个节点上。</li><li>Impala daemon不间断的跟statestore进行通信交流，从而确认哪个节点是健康的能接收新的工作任务。它同时接收catalogd daemon（从Impala 1.2之后支持）传来的广播消息来更新元数据信息，当集群中的任意节点create、alter、drop任意对象、或者执行INSERT、LOAD DATA的时候触发广播消息</li></ul></li></ul></li></ul><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/092100494176141.png" alt="img"></p><ul><li><strong>impala查询过程</strong><ul><li>0、启动好impala集群，然后impalad服务都会向impala state store注册和订阅，然后state store服务监控每一个impalad的健康状态。</li><li>1、客户端提交一个查询请求给impalad</li><li>2、impalad根据查询的请求sql语句，然后操作存储在mysql中的元数据，获取到sql语句中表的元数据信息以及要操作表的真实数据地址。</li><li>3、解析sql语句，生成查询任务，最后把任务分发到不同的impalad节点进行分布式查询计算</li><li>4、把查询到的结果汇总之后，返回给客户端</li></ul></li></ul><h3 id="_2、impala集群的启动和停止" tabindex="-1"><a class="header-anchor" href="#_2、impala集群的启动和停止" aria-hidden="true">#</a> 2、impala集群的启动和停止</h3><h4 id="_2-1-启动" tabindex="-1"><a class="header-anchor" href="#_2-1-启动" aria-hidden="true">#</a> 2.1 启动</h4><ul><li><p>1、需要启动HDFS</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    start-dfs.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>2、启动hive的元数据服务</p><ul><li>在node1上执行命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /export/servers/hive-1.1.0-cdh5.14.0
<span class="token function">nohup</span> bin/hive <span class="token parameter variable">--service</span> metastore <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>3、启动impala</p><ul><li><p>在主节点node3上启动以下服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> impala-state-store start
<span class="token function">service</span> impala-catalog start
<span class="token function">service</span> impala-server start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在从节点node1和node2上启动impala-server</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> impala-server start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>4、查看impala进程是否存在</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> impala
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1550735579716.png" alt="img"></p><p>注意：启动之后所有关于impala的日志默认都在 /var/log/impala<br> 这个路径下，node3机器上面应该有三个进 程，node1与node2机器上面只有一个进程，如果进程个数不对，去对应目录下查看报错日志</p><h4 id="_2-2-停止" tabindex="-1"><a class="header-anchor" href="#_2-2-停止" aria-hidden="true">#</a> 2.2 停止</h4><ul><li><p>在主节点node3上关闭以下服务</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>service impala-state-store stop
service impala-catalog stop
service impala-server stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在从节点node1和node2上关闭impala-server</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>service impala-server stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_3、impala的web界面访问" tabindex="-1"><a class="header-anchor" href="#_3、impala的web界面访问" aria-hidden="true">#</a> 3、impala的web界面访问</h3><ul><li>启动好impala集群之后，可以访问web地址，查看集群相关信息 <ul><li>访问impalad的管理界面http:/node3:25000/</li></ul></li></ul><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1550735908605.png" alt="1550735908605"></p><ul><li><p>访问statestored的管理界面http:/node3:25010/</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1550735957214.png" alt="1550735957214"></p></li><li><p>访问catalogd 的管理界面http:/node3:25020/</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1550736004673.png" alt="1550736004673"></p></li></ul><h3 id="_4、impala的使用" tabindex="-1"><a class="header-anchor" href="#_4、impala的使用" aria-hidden="true">#</a> 4、impala的使用</h3><h4 id="_4-1-impala-shell的外部命令参数语法" tabindex="-1"><a class="header-anchor" href="#_4-1-impala-shell的外部命令参数语法" aria-hidden="true">#</a> 4.1 impala-shell的外部命令参数语法</h4><ul><li><p>不需要进入到impala-shell交互命令行当中即可执行的命令参数</p></li><li><p>impala-shell后面执行的时候可以带很多参数：</p><ul><li><p>-h 查看帮助文档</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1555999818766.png" alt="1555999818766"></p></li><li><p>-v 查看对应版本</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556000095985.png" alt="1556000095985"></p></li><li><p>-r 刷新整个元数据，数据量大的时候，比较消耗服务器性能</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556000019262.png" alt="1556000019262"></p></li><li><p>-B 去格式化，查询大量数据可以提高性能</p><p>--print_header 去格式化显示列名 --output_delimiter 指定分隔符</p></li></ul></li><li><p>-f 执行查询文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd /export/servers
vim impala-shell.sql

select * from employee
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>impala-shell -f impala-shell.sql</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556000424758.png" alt="1556000424758"></p></li></ul></li><li><p>-i 连接到impalad</p><p>​ --impalad 指定impalad去执行任务</p></li><li><p>-o 保存执行结果到文件当中去</p><p>​ --output_file 指定输出文件名</p><ul><li>impala-shell -f impala-shell.sql -o hello.txt</li></ul><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556000574723.png" alt="1556000574723"></p></li></ul><h4 id="_4-2-impala-shell的内部命令参数语法" tabindex="-1"><a class="header-anchor" href="#_4-2-impala-shell的内部命令参数语法" aria-hidden="true">#</a> 4.2 impala-shell的内部命令参数语法</h4><ul><li><p>进入impala-shell命令行之后可以执行的语法</p><ul><li><p>help</p><ul><li><p>帮助文档</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556030753137.png" alt="1556030753137"></p></li></ul></li><li><p>connect</p><ul><li><p>connect hostname 连接到某一台机器上面去执行</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556030802409.png" alt="1556030802409"></p><p></p></li></ul></li><li><p>refresh</p><ul><li><p>刷新</p></li><li><p>refresh dbname.tablename 增量刷新，刷新某一张表的元数据，主要用于刷新hive当中数据表里面的数据改变的情况</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556030895715.png" alt="1556030895715"></p></li></ul></li><li><p>invalidate metadata</p><ul><li><p>invalidate metadata全量刷新，性能消耗较大，主要用于hive当中新建数据库或者数据库表的时候来进行刷新</p><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556030978124.png" alt="1556030978124"></p></li></ul></li><li><p>explain</p><ul><li><p>用于查看sql语句的执行计划</p><ul><li>explain select * from default.employee;</li></ul><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556031055194.png" alt="1556031055194"></p></li><li><p>explain的值可以设置成0,1,2,3等几个值，其中3级别是最高的，可以打印出最全的信息</p><ul><li>set explain_level=3;</li></ul><p><img src="https://yyhbook-1300437152.cos.ap-beijing.myqcloud.com/impala/1556031157316.png" alt="1556031157316"></p></li></ul></li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意:
(1) 在hive窗口当中插入的数据或者新建的数据库或者数据库表，在impala当中是不可直接查询到的，需要刷新数据库，使用命令 invalidate metadata;
(2) 在impala-shell当中插入的数据，在impala当中是可以直接查询到的，不需要刷新数据库，其中使用的就是catalog这个服务的功能实现的，catalog是impala1.2版本之后增加的模块功能，主要作用就是同步impala之间的元数据.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-创建数据库" tabindex="-1"><a class="header-anchor" href="#_4-3-创建数据库" aria-hidden="true">#</a> 4.3 创建数据库</h4><ul><li>impala-shell进入到impala的交互窗口</li></ul><h5 id="_4-3-1-查看所有数据库" tabindex="-1"><a class="header-anchor" href="#_4-3-1-查看所有数据库" aria-hidden="true">#</a> 4.3.1 查看所有数据库</h5><ul><li>show databases;</li></ul><h5 id="_4-3-2-创建与删除数据库" tabindex="-1"><a class="header-anchor" href="#_4-3-2-创建与删除数据库" aria-hidden="true">#</a> 4.3.2 创建与删除数据库</h5><ul><li>创建数据库 <ul><li>create database if not exists mydb1;</li></ul></li><li>删除数据库 <ul><li>drop database if exists mydb1;</li></ul></li></ul><h4 id="_4-4-创建表" tabindex="-1"><a class="header-anchor" href="#_4-4-创建表" aria-hidden="true">#</a> 4.4 创建表</h4><ul><li><p>创建表的语法跟hive一样</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>内部表：
<span class="token keyword">create</span>  <span class="token keyword">table</span>  student1<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token punctuation">,</span>name string <span class="token punctuation">,</span>age <span class="token keyword">int</span> <span class="token punctuation">)</span>  <span class="token keyword">row</span>  format  delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span>  <span class="token keyword">by</span>  <span class="token string">&#39;\\t&#39;</span> <span class="token punctuation">;</span>


外部表：
<span class="token keyword">create</span>  external <span class="token keyword">table</span>  student2<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token punctuation">,</span>name string <span class="token punctuation">,</span>age <span class="token keyword">int</span> <span class="token punctuation">)</span>  <span class="token keyword">row</span>  format  delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span>  <span class="token keyword">by</span>  <span class="token string">&#39;\\t&#39;</span> location  <span class="token string">&#39;/input/impala/external&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_4-5-向表中加载数据" tabindex="-1"><a class="header-anchor" href="#_4-5-向表中加载数据" aria-hidden="true">#</a> 4.5 向表中加载数据</h4><ul><li>insert语句插入数据</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>insert into student1 values (1, &#39;zhangsan&#39;, 25 );
insert into student1 values (2, &#39;lisi&#39;, 20 );
insert into student1 values (3, &#39;xiaozhang&#39;, 35 );
insert into student1 values (4, &#39;laowang&#39;, 45 );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>通过load hdfs的数据到impala表中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>准备数据student.txt并上传到hdfs的 /user/impala路径下去
11	zhangsan1	15
22	zhangsan2	20
33	zhangsan3	30
44	zhangsan4	50

加载数据
load data inpath &#39;/user/impala&#39; into table student1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用insert into select 语法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>insert  into  user1 select * from user2;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_4-6-查询数据" tabindex="-1"><a class="header-anchor" href="#_4-6-查询数据" aria-hidden="true">#</a> 4.6 查询数据</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from student1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-7-清空表数据" tabindex="-1"><a class="header-anchor" href="#_4-7-清空表数据" aria-hidden="true">#</a> 4.7 清空表数据</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>truncate  student1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-8-删除表数据" tabindex="-1"><a class="header-anchor" href="#_4-8-删除表数据" aria-hidden="true">#</a> 4.8 删除表数据</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>drop table student1；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,47),d=[n];function t(p,r){return e(),i("div",null,d)}const o=a(s,[["render",t],["__file","index.html.vue"]]);export{o as default};
