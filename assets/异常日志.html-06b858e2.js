import{_ as n,p as a,q as s,a1 as e}from"./framework-5866ffd3.js";const t={},o=e(`<h2 id="异常日志" tabindex="-1"><a class="header-anchor" href="#异常日志" aria-hidden="true">#</a> 异常日志</h2><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><h4 id="强制" tabindex="-1"><a class="header-anchor" href="#强制" aria-hidden="true">#</a> 强制</h4><ol><li><p>【强制】Java 类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该通过 catch 来处理，比如: <code>IndexOutOfBoundsException</code> ， <code>NullPointerException</code> 等等。 <strong>说明</strong> : 无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch NumberFormatException 来实现。 <strong>正例</strong> : <code>if (obj != null) {...}</code><strong>反例</strong> : <code>try { obj.method() } catch (NullPointerException e) {...}</code></p></li><li><p>【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。</p></li><li><p>【强制】对大段代码进行 try-catch，这是不负责任的表现。catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。</p></li><li><p>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p></li><li><p>【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</p></li><li><p>【强制】finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。 <strong>说明</strong> : 如果 JDK7 及以上，可以使用 try-with-resources 方式。</p></li><li><p>【强制】不能在 finally 块中使用 return，finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</p></li><li><p>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。 <strong>说明</strong> : 如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p></li></ol><h4 id="推荐" tabindex="-1"><a class="header-anchor" href="#推荐" aria-hidden="true">#</a> 推荐</h4><ol><li><p>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。 <strong>说明</strong> : 本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。</p></li><li><p>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景:</p><ol><li>返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。 <strong>反例</strong> : <code>public int f() { return Integer 对象}</code>， 如果为 null，自动解箱抛 NPE。</li></ol></li><li><p>【推荐】定义时区分 unchecked / checked 异常，避免直接抛出 <code>new RuntimeException()</code>，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如: DAOException / ServiceException 等。</p></li></ol><h4 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h4><ol><li><p>【参考】在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http/api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、“错误码”、“错误简短信息”。 <strong>说明</strong> : 关于 RPC 方法返回方式使用 Result 方式的理由: 1)使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。 2)如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p></li><li><p>【参考】避免出现重复的代码(Don’t Repeat Yourself)，即 DRY 原则。 <strong>说明</strong> : 随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是共用模块。 <strong>正例</strong> : 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取: <code>private boolean checkParam(DTO dto) {...}</code></p></li></ol><h3 id="日志规约" tabindex="-1"><a class="header-anchor" href="#日志规约" aria-hidden="true">#</a> 日志规约</h3><h4 id="强制-1" tabindex="-1"><a class="header-anchor" href="#强制-1" aria-hidden="true">#</a> 强制</h4><ol><li>【强制】应用中不可直接使用日志系统(Log4j、Logback)中的 API，而应依赖使用日志框架 SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
 <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Abc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</p></li><li><p>【强制】应用中的扩展日志(如打点、临时监控、访问日志等)命名方式: appName_logType_logName.log。logType:日志类型，推荐分类有 stats/desc/monitor/visit 等；logName:日志描述。这种命名的好处: 通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。 <strong>正例</strong> : mppserver 应用中单独监控时区转换异常，如: mppserver_monitor_timeZoneConvert.log <strong>说明</strong> : 推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于 通过日志对系统进行及时监控。</p></li><li><p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方 式。 <strong>说明</strong> : logger.debug(&quot;Processing trade with id: &quot; + id + &quot; symbol: &quot; + symbol);如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString() 方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。 <strong>正例</strong> : (条件)</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Processing trade with id: &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot; symbol: &quot;</span> <span class="token operator">+</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正例</strong> : (条件)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Processing trade with id: {} symbol : {} &quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。 <strong>正例</strong> : <code>&lt;logger name=&quot;com.taobao.dubbo.config&quot; additivity=&quot;false&quot;&gt;</code></p></li><li><p>【强制】异常信息应该包括两类信息: 案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。 <strong>正例</strong> : logger.error(各类参数或者对象 toString + &quot;_&quot; + e.getMessage(), e);</p></li></ol><h4 id="推荐-1" tabindex="-1"><a class="header-anchor" href="#推荐-1" aria-hidden="true">#</a> 推荐</h4><ol><li>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘 撑爆，并记得及时删除这些观察日志。 <strong>说明</strong> : 大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考: 这些日志真的有人看吗? 看到这条日志你能做什么? 能不能给问题排查带来好处?</li></ol><h4 id="参考-1" tabindex="-1"><a class="header-anchor" href="#参考-1" aria-hidden="true">#</a> 参考</h4><ol start="2"><li>【参考】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。</li></ol>`,21),l=[o];function i(p,r){return a(),s("div",null,l)}const d=n(t,[["render",i],["__file","异常日志.html.vue"]]);export{d as default};
